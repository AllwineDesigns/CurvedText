{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","updatePathData","multiplier","state","value","fontSize","units","diameter","lines","split","globalMinAngle","Number","MAX_VALUE","globalMaxAngle","MIN_VALUE","radius","pathStrings","centeredPathStrings","warpedPathStrings","pathObjs","angleOffsets","height","forEach","text","i","pathString","textToSVG","getD","x","y","anchor","push","obj","parse","minAngle","maxAngle","minY","maxY","cmd","angle1","angle2","angle","angleOffset","newPath","centeredPath","oldCmd","slice","centeredCmd","Math","sin","join","width","setState","handleDoWarp","e","doWarp","handleFontSizeChange","fontSizeString","target","parseFloat","handleUnitsChange","inInchesMultiplier","inUnitsMultiplier","newUnits","newDiameter","newFontSize","diameterString","round","handleDiameterChange","handleChange","length","handleDownloadSVG","svg","viewBox","xmlns","xmlnsXlink","map","str","key","d","svgString","renderToString","element","document","createElement","setAttribute","encodeURIComponent","click","console","log","load","err","t","classes","this","props","Card","className","card","CardContent","TextField","fullWidth","multiline","rows","onChange","FormControlLabel","control","label","labelPlacement","Select","MenuItem","Switch","checked","color","preserveAspectRatio","CardActions","Button","variant","onClick","Component","withStyles","maxWidth","border","display","margin","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d11ad5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { renderToString } from 'react-dom/server';\nimport textToSVG from 'text-to-svg';\nimport parse from 'parse-svg-path';\n\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  card: {\n    maxWidth: 900\n  },\n  svg: {\n    border: \"1px solid black\",\n    maxWidth: 850,\n    display: \"block\",\n    margin: \"auto\"\n  },\n  label: {\n    paddingRight: 5\n  }\n};\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pathStrings: [],\n      warpedPathStrings: [],\n      value: \"Cinnamon\",\n      doWarp: true,\n      width: 100,\n      height: 40,\n      lines: 1,\n      fontSizeString: \".4\",\n      diameterString: \"1.686\",\n      fontSize: .4,\n      diameter: 1.686,\n      units: \"in\"\n    }\n  }\n\n  componentWillMount() {\n    textToSVG.load('/Times New Roman.ttf', (err, t) => {\n      this.textToSVG = t;\n      this.updatePathData();\n    });\n  }\n\n  updatePathData = () => {\n    const {\n      value,\n      fontSize,\n      units,\n      diameter\n    } = this.state;\n\n    let multiplier;\n\n    switch(units) {\n      case \"cm\":\n        multiplier = 96/2.54;\n        break;\n      case \"mm\":\n        multiplier = 96/25.4;\n        break;\n      default:\n        multiplier = 96;\n        break;\n    }\n\n    const lines = value.split(\"\\n\");\n\n    let globalMinAngle = Number.MAX_VALUE;\n    let globalMaxAngle = Number.MIN_VALUE;\n\n    const radius = (diameter*multiplier)/2;\n\n    const pathStrings = [];\n    const centeredPathStrings = [];\n    const warpedPathStrings = [];\n    const pathObjs = [];\n    const angleOffsets = [];\n\n    let height = fontSize*multiplier;\n\n    lines.forEach( (text,i) => {\n      const pathString = this.textToSVG.getD(text, { x: 0, y: height, fontSize: fontSize*multiplier, anchor: \"left baseline\" });\n      pathStrings.push(pathString);\n\n      const obj = parse(pathString);\n      pathObjs.push(obj);\n\n      let minAngle = Number.MAX_VALUE;\n      let maxAngle = Number.MIN_VALUE;\n\n      let minY = Number.MAX_VALUE;\n      let maxY = Number.MIN_VALUE;\n\n      obj.forEach((cmd) => {\n        if(cmd[0] === \"Q\") {\n          const angle1 = cmd[1]/radius;\n          if(angle1 < minAngle) {\n            minAngle = angle1;\n          }\n          if(angle1 > maxAngle) {\n            maxAngle = angle1;\n          }\n\n          const angle2 = cmd[3]/radius;\n          if(angle2 < minAngle) {\n            minAngle = angle2;\n          }\n          if(angle2 > maxAngle) {\n            maxAngle = angle2;\n          }\n\n          if(cmd[2] < minY) {\n            minY = cmd[2];\n          }\n          if(cmd[2] > maxY) {\n            maxY = cmd[2];\n          }\n          if(cmd[4] < minY) {\n            minY = cmd[4];\n          }\n          if(cmd[4] > maxY) {\n            maxY = cmd[4];\n          }\n        } else if(cmd[0] === \"Z\") {\n        } else {\n          const angle = cmd[1]/radius;\n          if(angle < minAngle) {\n            minAngle = angle;\n          }\n          if(angle > maxAngle) {\n            maxAngle = angle;\n          }\n          if(cmd[2] < minY) {\n            minY = cmd[2];\n          }\n          if(cmd[2] > maxY) {\n            maxY = cmd[2];\n          }\n        }\n      });\n\n      if(minAngle < globalMinAngle) {\n        globalMinAngle = minAngle;\n      }\n      if(maxAngle > globalMaxAngle) {\n        globalMaxAngle = maxAngle;\n      }\n\n      angleOffsets.push(-(minAngle+maxAngle)/2);\n\n      height += fontSize*multiplier;\n    });\n\n    const angleOffset = -(globalMaxAngle+globalMinAngle)/2;\n\n    // TODO - to properly calculate the warped space, we should resample the line segments and\n    // quadratic bezier curves into very short linear segments. In my experience, the line segments\n    // and bezier curves are short enough that I can't see a difference between a resampled curve\n    // and just warping the control points/end points, but I'm only able to laser etch things under\n    // 2 inches in diameter and the lettering height has been small.\n    pathObjs.forEach( (obj,i) => {\n      let newPath = \"\";\n      let centeredPath = \"\";\n      obj.forEach((oldCmd) => {\n        const cmd = oldCmd.slice();\n        const centeredCmd = oldCmd.slice();\n        if(cmd[0] === \"Q\") {\n          const angle1 = cmd[1]/radius+angleOffsets[i];\n          cmd[1] = radius*Math.sin(angle1)-radius*angleOffset;\n\n          const angle2 = cmd[3]/radius+angleOffsets[i];\n          cmd[3] = radius*Math.sin(angle2)-radius*angleOffset;\n\n          newPath += \" \" + cmd.join(\" \");\n\n          centeredCmd[1] = centeredCmd[1]+angleOffsets[i]*radius-radius*angleOffset;\n          centeredCmd[3] = centeredCmd[3]+angleOffsets[i]*radius-radius*angleOffset;\n          centeredPath += \" \" + centeredCmd.join(\" \");\n        } else if(cmd[0] === \"Z\") {\n          newPath += \" \" + cmd.join(\" \");\n          centeredPath += \" \" + centeredCmd.join(\" \");\n        } else {\n          const angle = cmd[1]/radius+angleOffsets[i];\n          cmd[1] = radius*Math.sin(angle)-radius*angleOffset;\n\n          newPath += \" \" + cmd.join(\" \");\n\n          centeredCmd[1] = centeredCmd[1]+angleOffsets[i]*radius-radius*angleOffset;\n          centeredPath += \" \" + centeredCmd.join(\" \");\n        }\n      });\n      warpedPathStrings.push(newPath);\n      centeredPathStrings.push(centeredPath);\n    });\n    const width = globalMaxAngle*radius-globalMinAngle*radius;\n    this.setState({ pathStrings: centeredPathStrings, width, height, warpedPathStrings: warpedPathStrings });\n  };\n\n  handleDoWarp = (e, doWarp) => {\n    this.setState({ doWarp });\n  };\n\n  handleFontSizeChange = (e) => {\n    const fontSizeString = e.target.value;\n    try {\n      const fontSize = parseFloat(fontSizeString);\n\n      if(fontSize > 0) {\n        this.setState({ fontSize, fontSizeString }, this.updatePathData);\n      } else {\n        this.setState({ fontSizeString });\n      }\n    } catch(e) {\n      this.setState({ fontSizeString });\n    }\n  };\n\n  handleUnitsChange = (e) => {\n    const {\n      diameter,\n      fontSize,\n      units\n    } = this.state;\n\n    const newUnits = e.target.value;\n\n    let inInchesMultiplier;\n    switch(units) {\n      case \"mm\":\n        inInchesMultiplier = 1./25.4;\n        break;\n      case \"cm\":\n        inInchesMultiplier = 1./2.54;\n        break;\n      case \"in\":\n      default:\n        inInchesMultiplier = 1;\n        break;\n    }\n\n    let inUnitsMultiplier;\n    switch(newUnits) {\n      case \"mm\":\n        inUnitsMultiplier = 25.4;\n        break;\n      case \"cm\":\n        inUnitsMultiplier = 2.54;\n        break;\n      case \"in\":\n      default:\n        inUnitsMultiplier = 1;\n        break;\n    }\n\n    const newDiameter = diameter*inInchesMultiplier*inUnitsMultiplier;\n    const newFontSize = fontSize*inInchesMultiplier*inUnitsMultiplier;\n    this.setState({ diameter: newDiameter, \n                    fontSize: newFontSize,\n                    diameterString: \"\" + Math.round(newDiameter*100000)/100000,\n                    fontSizeString: \"\" + Math.round(newFontSize*100000)/100000,\n                    units: newUnits }, this.updatePathData);\n  };\n\n  handleDiameterChange = (e) => {\n    const diameterString = e.target.value;\n    try {\n      const diameter = parseFloat(diameterString);\n\n      if(diameter > 0) {\n        this.setState({ diameter, diameterString }, this.updatePathData);\n      } else {\n        this.setState({ diameterString });\n      }\n    } catch(e) {\n      this.setState({ diameterString });\n    }\n  };\n\n  handleChange = (e) => {\n    const value = e.target.value;\n    const lines = value.split(\"\\n\").length;\n\n    this.setState({ value, lines }, this.updatePathData);\n  };\n\n  handleDownloadSVG = (e) => {\n    const {\n      value,\n      height,\n      width,\n      doWarp,\n      warpedPathStrings,\n      pathStrings\n    } = this.state;\n    const svg = <svg width={Math.round(width/96*1000000)/1000000 + \"in\"} height={Math.round(height/96*1000000)/1000000 + \"in\"} viewBox={\"0 0 \" + width + \" \" + height} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n        { doWarp ?\n          warpedPathStrings.map((str,i) =>\n          <g key={i}>\n            <path d={str}/>\n          </g>)\n          :\n          pathStrings.map((str,i) =>\n          <g key={i}>\n            <path d={str}/>\n          </g>)\n        }\n        </svg>;\n\n    const svgString = renderToString(svg);\n\n    const element = document.createElement('a');\n\n    element.setAttribute('href', 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgString));\n    element.setAttribute('download', value.split(\"\\n\").join(\"_\") + \".svg\");\n\n    element.click();\n\n    console.log(svgString);\n\n  };\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      pathStrings,\n      warpedPathStrings,\n      width,\n      height,\n      value,\n      doWarp,\n      lines,\n      fontSizeString,\n      diameterString,\n      units\n    } = this.state;\n    return (\n      <Card className={classes.card}>\n      <CardContent>\n        <div>\n          <TextField fullWidth={true} multiline={true} rows={lines} value={value} onChange={this.handleChange}/>\n          <FormControlLabel control={\n          <TextField value={fontSizeString} onChange={this.handleFontSizeChange}/>\n          } label=\"Font Size\" labelPlacement=\"start\" classes={ { label: classes.label } }/>\n\n          <FormControlLabel control={\n          <TextField value={diameterString} onChange={this.handleDiameterChange}/>\n          } label=\"Diameter\" labelPlacement=\"start\" classes={ { label: classes.label } }/>\n\n          <FormControlLabel control={\n            <Select value={units} onChange={this.handleUnitsChange}>\n              <MenuItem value=\"in\">Inches</MenuItem>\n              <MenuItem value=\"mm\">Millimeters</MenuItem>\n              <MenuItem value=\"cm\">Centimeters</MenuItem>\n            </Select>\n          } label=\"Units\" labelPlacement=\"start\" classes={ { label: classes.label } }/>\n\n          <FormControlLabel control={\n          <Switch checked={doWarp} onChange={this.handleDoWarp} color=\"primary\"/>\n          } label=\"Do Warp\"/>\n\n        </div>\n        <br/>\n        <div>\n        <svg preserveAspectRatio=\"xMidYMin\" className={classes.svg} height={height*3} viewBox={\"0 0 \" + width + \" \" + height}>\n        { doWarp ?\n          warpedPathStrings.map((str,i) =>\n          <g key={i}>\n            <path d={str}/>\n          </g>)\n          :\n          pathStrings.map((str,i) =>\n          <g key={i}>\n            <path d={str}/>\n          </g>)\n        }\n        </svg>\n        </div>\n      </CardContent>\n      <CardActions>\n        <Button variant=\"raised\" color=\"primary\" onClick={this.handleDownloadSVG}>Download SVG</Button>\n      </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}